openapi: 3.0.3
info:
  title: 한빛 TODO 앱 API
  description: |
    한빛 TODO 앱의 RESTful API 문서입니다.

    이 API는 할일 관리, 사용자 인증, 데이터 동기화 기능을 제공합니다.

    ## 주요 기능
    - **할일 CRUD**: 생성, 조회, 수정, 삭제
    - **게스트 모드**: 인증 없이 제한된 기능 사용
    - **인증 모드**: AWS Cognito를 통한 완전한 기능 사용
    - **데이터 동기화**: 오프라인/온라인 상태 간 자동 동기화
    - **데이터 이전**: localStorage에서 클라우드로 마이그레이션

    ## 인증 방식
    - **게스트 토큰**: AWS Cognito Identity Pool의 비인증 토큰
    - **사용자 토큰**: AWS Cognito User Pool의 JWT 토큰

  version: 1.0.0
  contact:
    name: 한빛 TODO 앱 팀
    email: support@todo-app.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.todo-app.com/api/v1
    description: 프로덕션 서버
  - url: https://dev-api.todo-app.com/api/v1
    description: 개발 서버

tags:
  - name: todos
    description: 할일 관리 API
  - name: auth
    description: 인증 관리 API
  - name: data
    description: 데이터 관리 API

paths:
  /todos:
    get:
      tags:
        - todos
      summary: 할일 목록 조회
      description: |
        사용자의 모든 할일을 조회합니다.

        게스트 사용자는 세션 기반 데이터만 조회 가능하며,
        인증된 사용자는 클라우드에 저장된 모든 데이터를 조회할 수 있습니다.
      security:
        - BearerAuth: []
      parameters:
        - name: limit
          in: query
          description: "한 번에 가져올 항목 수 (기본값: 20, 최대: 100)"
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: cursor
          in: query
          description: 페이지네이션 커서 (다음 페이지 조회용)
          required: false
          schema:
            type: string
        - name: filter
          in: query
          description: 할일 상태 필터
          required: false
          schema:
            type: string
            enum: [all, active, completed]
            default: all
        - name: sortBy
          in: query
          description: 정렬 기준
          required: false
          schema:
            type: string
            enum: [createdAt, priority, title]
            default: createdAt
        - name: sortOrder
          in: query
          description: 정렬 순서
          required: false
          schema:
            type: string
            enum: [asc, desc]
            default: desc
      responses:
        "200":
          description: 할일 목록 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      todos:
                        type: array
                        items:
                          $ref: "#/components/schemas/Todo"
                      pagination:
                        $ref: "#/components/schemas/Pagination"
                      metadata:
                        $ref: "#/components/schemas/TodoMetadata"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalError"

    post:
      tags:
        - todos
      summary: 새 할일 생성
      description: |
        새로운 할일을 생성합니다.

        게스트 사용자는 제한된 수의 할일만 생성 가능하며,
        인증된 사용자는 무제한으로 생성할 수 있습니다.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - priority
              properties:
                title:
                  type: string
                  minLength: 1
                  maxLength: 100
                  description: 할일 제목
                  example: "프로젝트 문서 작성"
                description:
                  type: string
                  maxLength: 500
                  description: 할일 상세 설명 (선택사항)
                  example: "API 문서와 사용자 가이드 작성"
                priority:
                  $ref: "#/components/schemas/Priority"
      responses:
        "201":
          description: 할일 생성 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      todo:
                        $ref: "#/components/schemas/Todo"
                      remainingQuota:
                        type: integer
                        description: 게스트 사용자의 남은 할당량
                        example: 9
        "400":
          $ref: "#/components/responses/ValidationError"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/QuotaExceeded"
        "500":
          $ref: "#/components/responses/InternalError"

  /todos/{todoId}:
    get:
      tags:
        - todos
      summary: 특정 할일 조회
      description: ID로 특정 할일의 상세 정보를 조회합니다.
      security:
        - BearerAuth: []
      parameters:
        - name: todoId
          in: path
          required: true
          description: 조회할 할일의 ID
          schema:
            type: string
            pattern: "^[a-zA-Z0-9-_]+$"
            example: "todo-123e4567-e89b-12d3-a456-426614174000"
      responses:
        "200":
          description: 할일 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      todo:
                        $ref: "#/components/schemas/Todo"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalError"

    put:
      tags:
        - todos
      summary: 할일 수정
      description: 기존 할일의 정보를 수정합니다.
      security:
        - BearerAuth: []
      parameters:
        - name: todoId
          in: path
          required: true
          description: 수정할 할일의 ID
          schema:
            type: string
            pattern: "^[a-zA-Z0-9-_]+$"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  minLength: 1
                  maxLength: 100
                  example: "수정된 할일 제목"
                description:
                  type: string
                  maxLength: 500
                  example: "수정된 상세 설명"
                priority:
                  $ref: "#/components/schemas/Priority"
                completed:
                  type: boolean
                  example: true
      responses:
        "200":
          description: 할일 수정 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      todo:
                        $ref: "#/components/schemas/Todo"
        "400":
          $ref: "#/components/responses/ValidationError"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalError"

    delete:
      tags:
        - todos
      summary: 할일 삭제
      description: 기존 할일을 완전히 삭제합니다.
      security:
        - BearerAuth: []
      parameters:
        - name: todoId
          in: path
          required: true
          description: 삭제할 할일의 ID
          schema:
            type: string
            pattern: "^[a-zA-Z0-9-_]+$"
      responses:
        "200":
          description: 할일 삭제 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      deletedId:
                        type: string
                        example: "todo-123e4567-e89b-12d3-a456-426614174000"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalError"

  /auth/guest:
    post:
      tags:
        - auth
      summary: 게스트 토큰 발급
      description: |
        인증 없이 제한된 기능을 사용할 수 있는 게스트 토큰을 발급합니다.

        게스트 토큰으로는 최대 10개의 할일을 생성할 수 있으며,
        세션이 종료되면 데이터가 삭제됩니다.
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                deviceId:
                  type: string
                  description: 클라이언트 장치 식별자 (선택사항)
                  example: "web-browser-123"
      responses:
        "201":
          description: 게스트 토큰 발급 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      guestToken:
                        type: string
                        description: AWS Cognito Identity Pool 토큰
                        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                      sessionId:
                        type: string
                        description: 게스트 세션 식별자
                        example: "guest-session-123e4567"
                      expiresIn:
                        type: integer
                        description: 토큰 만료 시간 (초)
                        example: 3600
                      permissions:
                        $ref: "#/components/schemas/GuestPermissions"
                      sampleTodos:
                        type: array
                        description: 시작용 샘플 할일 데이터
                        items:
                          $ref: "#/components/schemas/Todo"
        "500":
          $ref: "#/components/responses/InternalError"

  /auth/refresh:
    post:
      tags:
        - auth
      summary: 토큰 갱신
      description: 만료된 액세스 토큰을 갱신합니다.
      security:
        - BearerAuth: []
      responses:
        "200":
          description: 토큰 갱신 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      accessToken:
                        type: string
                        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                      expiresIn:
                        type: integer
                        example: 3600
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalError"

  /auth/me:
    get:
      tags:
        - auth
      summary: 사용자 정보 조회
      description: 현재 인증된 사용자의 정보와 권한을 조회합니다.
      security:
        - BearerAuth: []
      responses:
        "200":
          description: 사용자 정보 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      user:
                        $ref: "#/components/schemas/User"
                      permissions:
                        oneOf:
                          - $ref: "#/components/schemas/GuestPermissions"
                          - $ref: "#/components/schemas/AuthenticatedPermissions"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalError"

  /export:
    get:
      tags:
        - data
      summary: 데이터 내보내기
      description: |
        사용자의 모든 할일 데이터를 지정된 형식으로 내보냅니다.

        반환되는 URL은 pre-signed URL로 제한된 시간 동안만 유효합니다.
      security:
        - BearerAuth: []
      parameters:
        - name: format
          in: query
          description: 내보낼 데이터 형식
          required: false
          schema:
            type: string
            enum: [json, csv]
            default: json
      responses:
        "200":
          description: 내보내기 URL 생성 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      exportUrl:
                        type: string
                        format: uri
                        description: 다운로드 가능한 pre-signed URL
                        example: "https://s3.amazonaws.com/bucket/export/user-data.json?signature=..."
                      expiresAt:
                        type: string
                        format: date-time
                        description: URL 만료 시간
                        example: "2024-01-15T10:30:00Z"
                      format:
                        type: string
                        example: "json"
                      totalItems:
                        type: integer
                        example: 42
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalError"

  /import:
    post:
      tags:
        - data
      summary: 데이터 가져오기
      description: |
        JSON 또는 CSV 파일에서 할일 데이터를 가져옵니다.

        기존 데이터와의 병합 전략을 선택할 수 있습니다.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  format: binary
                  description: 가져올 JSON 또는 CSV 파일
                mergeStrategy:
                  type: string
                  enum: [replace, merge]
                  default: merge
                  description: 기존 데이터와의 병합 전략
                validateData:
                  type: boolean
                  default: true
                  description: 데이터 유효성 검사 여부
      responses:
        "200":
          description: 데이터 가져오기 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      importedCount:
                        type: integer
                        example: 25
                      skippedCount:
                        type: integer
                        example: 3
                      errors:
                        type: array
                        items:
                          type: string
                        example:
                          [
                            "Line 5: Invalid date format",
                            "Line 12: Title too long",
                          ]
        "400":
          $ref: "#/components/responses/ValidationError"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "413":
          $ref: "#/components/responses/PayloadTooLarge"
        "500":
          $ref: "#/components/responses/InternalError"

  /migrate:
    post:
      tags:
        - data
      summary: localStorage 마이그레이션
      description: |
        클라이언트의 localStorage에서 클라우드로 데이터를 마이그레이션합니다.

        게스트 모드에서 인증 모드로 전환할 때 사용됩니다.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - localStorageData
              properties:
                localStorageData:
                  type: array
                  items:
                    $ref: "#/components/schemas/Todo"
                  description: 마이그레이션할 localStorage 데이터
                migrationOptions:
                  type: object
                  properties:
                    preserveIds:
                      type: boolean
                      default: false
                      description: 기존 ID 보존 여부
                    mergeStrategy:
                      type: string
                      enum: [replace, merge]
                      default: merge
                      description: 기존 클라우드 데이터와의 병합 전략
      responses:
        "200":
          description: 마이그레이션 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      migratedCount:
                        type: integer
                        example: 8
                      duplicateCount:
                        type: integer
                        example: 2
                      totalCount:
                        type: integer
                        example: 10
        "400":
          $ref: "#/components/responses/ValidationError"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalError"

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        AWS Cognito에서 발급받은 JWT 토큰을 사용합니다.

        - **게스트 토큰**: Identity Pool의 비인증 토큰
        - **사용자 토큰**: User Pool의 인증된 JWT 토큰

  schemas:
    Todo:
      type: object
      required:
        - id
        - title
        - priority
        - completed
        - createdAt
        - updatedAt
        - userId
        - isGuest
      properties:
        id:
          type: string
          description: 할일의 고유 식별자
          example: "todo-123e4567-e89b-12d3-a456-426614174000"
        title:
          type: string
          minLength: 1
          maxLength: 100
          description: 할일 제목
          example: "프로젝트 문서 작성"
        description:
          type: string
          maxLength: 500
          description: 할일 상세 설명
          example: "API 문서와 사용자 가이드 작성 완료"
        priority:
          $ref: "#/components/schemas/Priority"
        completed:
          type: boolean
          description: 완료 여부
          example: false
        createdAt:
          type: string
          format: date-time
          description: 생성 시간 (ISO 8601)
          example: "2024-01-15T09:30:00Z"
        updatedAt:
          type: string
          format: date-time
          description: 최종 수정 시간 (ISO 8601)
          example: "2024-01-15T10:15:00Z"
        userId:
          type: string
          description: 소유자 ID
          example: "user-123e4567-e89b-12d3-a456-426614174000"
        isGuest:
          type: boolean
          description: 게스트 사용자 생성 여부
          example: false

    Priority:
      type: string
      enum: [low, medium, high]
      description: |
        할일의 우선순위
        - `low`: 낮음 (일반적인 할일)
        - `medium`: 보통 (중요한 할일)
        - `high`: 높음 (긴급한 할일)
      example: medium

    User:
      type: object
      required:
        - id
        - email
        - name
        - isGuest
      properties:
        id:
          type: string
          description: 사용자 고유 식별자
          example: "user-123e4567-e89b-12d3-a456-426614174000"
        email:
          type: string
          format: email
          description: 사용자 이메일
          example: "user@example.com"
        name:
          type: string
          description: 사용자 이름
          example: "김개발"
        isGuest:
          type: boolean
          description: 게스트 사용자 여부
          example: false
        createdAt:
          type: string
          format: date-time
          description: 가입 시간
          example: "2024-01-01T00:00:00Z"
        lastLoginAt:
          type: string
          format: date-time
          description: 마지막 로그인 시간
          example: "2024-01-15T09:00:00Z"

    Pagination:
      type: object
      required:
        - hasNextPage
        - nextCursor
        - totalCount
      properties:
        hasNextPage:
          type: boolean
          description: 다음 페이지 존재 여부
          example: false
        nextCursor:
          type: string
          nullable: true
          description: 다음 페이지 조회용 커서
          example: null
        totalCount:
          type: integer
          description: 전체 항목 수
          example: 15

    TodoMetadata:
      type: object
      required:
        - userLimits
      properties:
        userLimits:
          type: object
          required:
            - maxItems
            - currentCount
            - isGuest
          properties:
            maxItems:
              type: integer
              description: 최대 생성 가능한 할일 수
              example: 10
            currentCount:
              type: integer
              description: 현재 생성된 할일 수
              example: 5
            isGuest:
              type: boolean
              description: 게스트 사용자 여부
              example: true

    GuestPermissions:
      type: object
      required:
        - maxTodos
        - canExport
        - canImport
        - sessionDuration
      properties:
        maxTodos:
          type: integer
          description: 최대 생성 가능한 할일 수
          example: 10
        canExport:
          type: boolean
          description: 데이터 내보내기 권한
          example: false
        canImport:
          type: boolean
          description: 데이터 가져오기 권한
          example: false
        sessionDuration:
          type: integer
          description: 세션 유지 시간 (초)
          example: 3600

    AuthenticatedPermissions:
      type: object
      required:
        - maxTodos
        - canExport
        - canImport
        - canShare
      properties:
        maxTodos:
          type: integer
          description: 최대 생성 가능한 할일 수 (-1은 무제한)
          example: -1
        canExport:
          type: boolean
          description: 데이터 내보내기 권한
          example: true
        canImport:
          type: boolean
          description: 데이터 가져오기 권한
          example: true
        canShare:
          type: boolean
          description: 할일 공유 권한
          example: true

    ErrorResponse:
      type: object
      required:
        - success
        - error
      properties:
        success:
          type: boolean
          example: false
        error:
          type: object
          required:
            - code
            - message
            - timestamp
            - requestId
          properties:
            code:
              type: string
              description: 에러 코드
              example: "VALIDATION_ERROR"
            message:
              type: string
              description: 사용자 친화적 에러 메시지
              example: "입력 데이터가 유효하지 않습니다."
            details:
              type: object
              description: 상세 에러 정보 (개발 환경에서만 제공)
              additionalProperties: true
            timestamp:
              type: string
              format: date-time
              description: 에러 발생 시간
              example: "2024-01-15T10:30:00Z"
            requestId:
              type: string
              description: 요청 추적용 ID
              example: "req-123e4567-e89b-12d3-a456-426614174000"

  responses:
    ValidationError:
      description: 입력 데이터 검증 실패
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            success: false
            error:
              code: "VALIDATION_ERROR"
              message: "입력 데이터가 유효하지 않습니다."
              details:
                field: "title"
                reason: "제목은 1자 이상 100자 이하여야 합니다."
              timestamp: "2024-01-15T10:30:00Z"
              requestId: "req-123e4567-e89b-12d3-a456-426614174000"

    Unauthorized:
      description: 인증 실패 또는 토큰 만료
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            success: false
            error:
              code: "UNAUTHORIZED"
              message: "인증이 필요합니다."
              timestamp: "2024-01-15T10:30:00Z"
              requestId: "req-123e4567-e89b-12d3-a456-426614174000"

    Forbidden:
      description: 권한 부족
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            success: false
            error:
              code: "FORBIDDEN"
              message: "이 작업을 수행할 권한이 없습니다."
              timestamp: "2024-01-15T10:30:00Z"
              requestId: "req-123e4567-e89b-12d3-a456-426614174000"

    NotFound:
      description: 요청한 리소스를 찾을 수 없음
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            success: false
            error:
              code: "NOT_FOUND"
              message: "요청한 할일을 찾을 수 없습니다."
              timestamp: "2024-01-15T10:30:00Z"
              requestId: "req-123e4567-e89b-12d3-a456-426614174000"

    QuotaExceeded:
      description: 할당량 초과
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            success: false
            error:
              code: "QUOTA_EXCEEDED"
              message: "게스트 사용자는 최대 10개의 할일만 생성할 수 있습니다."
              timestamp: "2024-01-15T10:30:00Z"
              requestId: "req-123e4567-e89b-12d3-a456-426614174000"

    PayloadTooLarge:
      description: 요청 본문이 너무 큼
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            success: false
            error:
              code: "PAYLOAD_TOO_LARGE"
              message: "파일 크기가 너무 큽니다. 최대 10MB까지 업로드 가능합니다."
              timestamp: "2024-01-15T10:30:00Z"
              requestId: "req-123e4567-e89b-12d3-a456-426614174000"

    InternalError:
      description: 서버 내부 오류
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            success: false
            error:
              code: "INTERNAL_ERROR"
              message: "서버에서 오류가 발생했습니다. 잠시 후 다시 시도해주세요."
              timestamp: "2024-01-15T10:30:00Z"
              requestId: "req-123e4567-e89b-12d3-a456-426614174000"

security:
  - BearerAuth: []
